// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/example/example.proto

/*
Package go_micro_srv_user is a generated protocol buffer package.

It is generated from these files:
	proto/example/example.proto

It has these top-level messages:
	Message
	GenerateIdRequest
	GenerateIdResponse
	CaptchaRequest
	CaptchaResponse
	SmsCaptchaRequest
	SmsCaptchaResponse
	RegisterRequest
	RegisterResponse
	AddNewKeyRequest
	AddNewKeyResponse
	LoginRequest
	LoginResponse
	LogoutRequest
	LogoutResponse
	GetInfoRequest
	GetInfoResponse
	AvatarRequest
	AvatarResponse
	RenameRequest
	RenameResponse
	AuthRequest
	AuthResponse
	GetKeysRequest
	GetKeysResponse
	DelKeyRequest
	DelKeyResponse
*/
package go_micro_srv_user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Example service

type ExampleService interface {
	GenerateId(ctx context.Context, in *GenerateIdRequest, opts ...client.CallOption) (*GenerateIdResponse, error)
	Captcha(ctx context.Context, in *CaptchaRequest, opts ...client.CallOption) (*CaptchaResponse, error)
	SmsCaptcha(ctx context.Context, in *SmsCaptchaRequest, opts ...client.CallOption) (*SmsCaptchaResponse, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*RegisterResponse, error)
	AddNewKey(ctx context.Context, in *AddNewKeyRequest, opts ...client.CallOption) (*AddNewKeyResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...client.CallOption) (*LogoutResponse, error)
	GetInfo(ctx context.Context, in *GetInfoRequest, opts ...client.CallOption) (*GetInfoResponse, error)
	Avatar(ctx context.Context, in *AvatarRequest, opts ...client.CallOption) (*AvatarResponse, error)
	Rename(ctx context.Context, in *RenameRequest, opts ...client.CallOption) (*RenameResponse, error)
	Auth(ctx context.Context, in *AuthRequest, opts ...client.CallOption) (*AuthResponse, error)
	GetKeys(ctx context.Context, in *GetKeysRequest, opts ...client.CallOption) (*GetKeysResponse, error)
	DelKey(ctx context.Context, in *DelKeyRequest, opts ...client.CallOption) (*DelKeyResponse, error)
}

type exampleService struct {
	c    client.Client
	name string
}

func NewExampleService(name string, c client.Client) ExampleService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.user"
	}
	return &exampleService{
		c:    c,
		name: name,
	}
}

func (c *exampleService) GenerateId(ctx context.Context, in *GenerateIdRequest, opts ...client.CallOption) (*GenerateIdResponse, error) {
	req := c.c.NewRequest(c.name, "Example.GenerateId", in)
	out := new(GenerateIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleService) Captcha(ctx context.Context, in *CaptchaRequest, opts ...client.CallOption) (*CaptchaResponse, error) {
	req := c.c.NewRequest(c.name, "Example.Captcha", in)
	out := new(CaptchaResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleService) SmsCaptcha(ctx context.Context, in *SmsCaptchaRequest, opts ...client.CallOption) (*SmsCaptchaResponse, error) {
	req := c.c.NewRequest(c.name, "Example.SmsCaptcha", in)
	out := new(SmsCaptchaResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleService) Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*RegisterResponse, error) {
	req := c.c.NewRequest(c.name, "Example.Register", in)
	out := new(RegisterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleService) AddNewKey(ctx context.Context, in *AddNewKeyRequest, opts ...client.CallOption) (*AddNewKeyResponse, error) {
	req := c.c.NewRequest(c.name, "Example.AddNewKey", in)
	out := new(AddNewKeyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleService) Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error) {
	req := c.c.NewRequest(c.name, "Example.Login", in)
	out := new(LoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleService) Logout(ctx context.Context, in *LogoutRequest, opts ...client.CallOption) (*LogoutResponse, error) {
	req := c.c.NewRequest(c.name, "Example.Logout", in)
	out := new(LogoutResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleService) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...client.CallOption) (*GetInfoResponse, error) {
	req := c.c.NewRequest(c.name, "Example.GetInfo", in)
	out := new(GetInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleService) Avatar(ctx context.Context, in *AvatarRequest, opts ...client.CallOption) (*AvatarResponse, error) {
	req := c.c.NewRequest(c.name, "Example.Avatar", in)
	out := new(AvatarResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleService) Rename(ctx context.Context, in *RenameRequest, opts ...client.CallOption) (*RenameResponse, error) {
	req := c.c.NewRequest(c.name, "Example.Rename", in)
	out := new(RenameResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleService) Auth(ctx context.Context, in *AuthRequest, opts ...client.CallOption) (*AuthResponse, error) {
	req := c.c.NewRequest(c.name, "Example.Auth", in)
	out := new(AuthResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleService) GetKeys(ctx context.Context, in *GetKeysRequest, opts ...client.CallOption) (*GetKeysResponse, error) {
	req := c.c.NewRequest(c.name, "Example.GetKeys", in)
	out := new(GetKeysResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleService) DelKey(ctx context.Context, in *DelKeyRequest, opts ...client.CallOption) (*DelKeyResponse, error) {
	req := c.c.NewRequest(c.name, "Example.DelKey", in)
	out := new(DelKeyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Example service

type ExampleHandler interface {
	GenerateId(context.Context, *GenerateIdRequest, *GenerateIdResponse) error
	Captcha(context.Context, *CaptchaRequest, *CaptchaResponse) error
	SmsCaptcha(context.Context, *SmsCaptchaRequest, *SmsCaptchaResponse) error
	Register(context.Context, *RegisterRequest, *RegisterResponse) error
	AddNewKey(context.Context, *AddNewKeyRequest, *AddNewKeyResponse) error
	Login(context.Context, *LoginRequest, *LoginResponse) error
	Logout(context.Context, *LogoutRequest, *LogoutResponse) error
	GetInfo(context.Context, *GetInfoRequest, *GetInfoResponse) error
	Avatar(context.Context, *AvatarRequest, *AvatarResponse) error
	Rename(context.Context, *RenameRequest, *RenameResponse) error
	Auth(context.Context, *AuthRequest, *AuthResponse) error
	GetKeys(context.Context, *GetKeysRequest, *GetKeysResponse) error
	DelKey(context.Context, *DelKeyRequest, *DelKeyResponse) error
}

func RegisterExampleHandler(s server.Server, hdlr ExampleHandler, opts ...server.HandlerOption) error {
	type example interface {
		GenerateId(ctx context.Context, in *GenerateIdRequest, out *GenerateIdResponse) error
		Captcha(ctx context.Context, in *CaptchaRequest, out *CaptchaResponse) error
		SmsCaptcha(ctx context.Context, in *SmsCaptchaRequest, out *SmsCaptchaResponse) error
		Register(ctx context.Context, in *RegisterRequest, out *RegisterResponse) error
		AddNewKey(ctx context.Context, in *AddNewKeyRequest, out *AddNewKeyResponse) error
		Login(ctx context.Context, in *LoginRequest, out *LoginResponse) error
		Logout(ctx context.Context, in *LogoutRequest, out *LogoutResponse) error
		GetInfo(ctx context.Context, in *GetInfoRequest, out *GetInfoResponse) error
		Avatar(ctx context.Context, in *AvatarRequest, out *AvatarResponse) error
		Rename(ctx context.Context, in *RenameRequest, out *RenameResponse) error
		Auth(ctx context.Context, in *AuthRequest, out *AuthResponse) error
		GetKeys(ctx context.Context, in *GetKeysRequest, out *GetKeysResponse) error
		DelKey(ctx context.Context, in *DelKeyRequest, out *DelKeyResponse) error
	}
	type Example struct {
		example
	}
	h := &exampleHandler{hdlr}
	return s.Handle(s.NewHandler(&Example{h}, opts...))
}

type exampleHandler struct {
	ExampleHandler
}

func (h *exampleHandler) GenerateId(ctx context.Context, in *GenerateIdRequest, out *GenerateIdResponse) error {
	return h.ExampleHandler.GenerateId(ctx, in, out)
}

func (h *exampleHandler) Captcha(ctx context.Context, in *CaptchaRequest, out *CaptchaResponse) error {
	return h.ExampleHandler.Captcha(ctx, in, out)
}

func (h *exampleHandler) SmsCaptcha(ctx context.Context, in *SmsCaptchaRequest, out *SmsCaptchaResponse) error {
	return h.ExampleHandler.SmsCaptcha(ctx, in, out)
}

func (h *exampleHandler) Register(ctx context.Context, in *RegisterRequest, out *RegisterResponse) error {
	return h.ExampleHandler.Register(ctx, in, out)
}

func (h *exampleHandler) AddNewKey(ctx context.Context, in *AddNewKeyRequest, out *AddNewKeyResponse) error {
	return h.ExampleHandler.AddNewKey(ctx, in, out)
}

func (h *exampleHandler) Login(ctx context.Context, in *LoginRequest, out *LoginResponse) error {
	return h.ExampleHandler.Login(ctx, in, out)
}

func (h *exampleHandler) Logout(ctx context.Context, in *LogoutRequest, out *LogoutResponse) error {
	return h.ExampleHandler.Logout(ctx, in, out)
}

func (h *exampleHandler) GetInfo(ctx context.Context, in *GetInfoRequest, out *GetInfoResponse) error {
	return h.ExampleHandler.GetInfo(ctx, in, out)
}

func (h *exampleHandler) Avatar(ctx context.Context, in *AvatarRequest, out *AvatarResponse) error {
	return h.ExampleHandler.Avatar(ctx, in, out)
}

func (h *exampleHandler) Rename(ctx context.Context, in *RenameRequest, out *RenameResponse) error {
	return h.ExampleHandler.Rename(ctx, in, out)
}

func (h *exampleHandler) Auth(ctx context.Context, in *AuthRequest, out *AuthResponse) error {
	return h.ExampleHandler.Auth(ctx, in, out)
}

func (h *exampleHandler) GetKeys(ctx context.Context, in *GetKeysRequest, out *GetKeysResponse) error {
	return h.ExampleHandler.GetKeys(ctx, in, out)
}

func (h *exampleHandler) DelKey(ctx context.Context, in *DelKeyRequest, out *DelKeyResponse) error {
	return h.ExampleHandler.DelKey(ctx, in, out)
}
